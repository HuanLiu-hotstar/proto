// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ratelimit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RateLimitClient is the client API for RateLimit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RateLimitClient interface {
	// Authority  request
	Limit(ctx context.Context, in *RateLimitRequest, opts ...grpc.CallOption) (*RateLimitReply, error)
}

type rateLimitClient struct {
	cc grpc.ClientConnInterface
}

func NewRateLimitClient(cc grpc.ClientConnInterface) RateLimitClient {
	return &rateLimitClient{cc}
}

func (c *rateLimitClient) Limit(ctx context.Context, in *RateLimitRequest, opts ...grpc.CallOption) (*RateLimitReply, error) {
	out := new(RateLimitReply)
	err := c.cc.Invoke(ctx, "/ratelimit.RateLimit/Limit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RateLimitServer is the server API for RateLimit service.
// All implementations must embed UnimplementedRateLimitServer
// for forward compatibility
type RateLimitServer interface {
	// Authority  request
	Limit(context.Context, *RateLimitRequest) (*RateLimitReply, error)
	mustEmbedUnimplementedRateLimitServer()
}

// UnimplementedRateLimitServer must be embedded to have forward compatible implementations.
type UnimplementedRateLimitServer struct {
}

func (UnimplementedRateLimitServer) Limit(context.Context, *RateLimitRequest) (*RateLimitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Limit not implemented")
}
func (UnimplementedRateLimitServer) mustEmbedUnimplementedRateLimitServer() {}

// UnsafeRateLimitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RateLimitServer will
// result in compilation errors.
type UnsafeRateLimitServer interface {
	mustEmbedUnimplementedRateLimitServer()
}

func RegisterRateLimitServer(s grpc.ServiceRegistrar, srv RateLimitServer) {
	s.RegisterService(&RateLimit_ServiceDesc, srv)
}

func _RateLimit_Limit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitServer).Limit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratelimit.RateLimit/Limit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitServer).Limit(ctx, req.(*RateLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RateLimit_ServiceDesc is the grpc.ServiceDesc for RateLimit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RateLimit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ratelimit.RateLimit",
	HandlerType: (*RateLimitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Limit",
			Handler:    _RateLimit_Limit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ratelimit/ratelimit.proto",
}
